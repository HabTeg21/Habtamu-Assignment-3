--Answer following questions

-- 1
	-- I prefer to use sub-queries because it is important to select a row based on a condition.

--2
	-- CTE (Common Table Expression) is a named (defined) table which is accessed by the statement that defines it
	-- we use CTE to create a recursive query

--3
	-- A table variable is like a temporary table that can be used within a Transact-SQL batch, stored procedure, or function—and is created and 
		--defined similarly to a table, only with a strictly defined lifetime scope

--4
	-- Truncate is faster compared to delete as it makes less use of the transaction log.
	-- Truncate reseeds identity values, whereas delete doesn't.
	-- Truncate is not possible when a table is referenced by a Foreign Key or tables are used in replication or with indexed views.

--5
	--Identity Column (Primary Key) is a column that uniquely identifies the row. 
		--By default it is generated by the database but it can me modified. Delting the Identity Coloumn 
		--Truncate allocates the spaces when the identity coloumn removed but not the DELETE command
		--DELETE does not update the Identity Column even if it the rows before it deleted.
--6
	-- DELETE FROM table_name  deletes all the row in the table
	-- We can rollback the deleted rows if we used the TRUNCATE command

-- Write queries for following scenarios
-- All scenarios are based on Database NORTHWND.
	USE Northwind;
--1
	SELECT DISTINCT City
	FROM Employees
	WHERE City IN (
		SELECT City FROM Customers);

    -- With out using sub-query
	SELECT DISTINCT E.City
	FROM Employees E
	INNER JOIN Customers C
	ON E.City = C.City;
--2
	--a
	SELECT DISTINCT City
	FROM Customers
		WHERE City NOT IN (
		SELECT City FROM Employees)

	--b
	SELECT DISTINCT C.City
	FROM Customers C
	LEFT JOIN Employees E
	ON C.City = E.City

--3

--4
SELECT C.City, SUM(OD.Quantity) Total_Products_Ordered
FROM Customers C
LEFT JOIN Orders O
	ON C.CustomerID = O.CustomerID
LEFT JOIN [Order Details] OD
	ON O.OrderID = OD.OrderID
GROUP BY C.City
ORDER BY Total_Products_Ordered;

--5
	--a
	SELECT C.City
	FROM Customers C
	GROUP BY C.City
		Having COUNT(C.City) = 2
	UNION
	SELECT CU.City
	FROM Customers CU
	GROUP BY CU.City 
		HAVING COUNT(CU.City) > 2;
	--b
	SELECT DISTINCT C.City
	FROM Customers C
		WHERE C.City IN(
			SELECT CU.City 
			FROM Customers CU 
			GROUP BY CU.City 
			HAVING COUNT(CU.City) >= 2);

--6
SELECT DISTINCT C.City
FROM ORDERS O
INNER JOIN Customers C
	ON O.CustomerID = C.CustomerID
INNER JOIN [Order Details] OD
	ON O.OrderID = OD.OrderID
GROUP BY C.City, OD.ProductID
HAVING COUNT(OD.ProductId) >=2;

--7
SELECT ContactName FROM Customers C
WHERE C.City NOT IN (
	SELECT O.ShipCity 
	FROM Orders O
	LEFT JOIN Customers C
		ON O.ShipCity = C.City);

--8


--9
	--a
	SELECT E.City 
	FROM Employees E
	WHERE E.City NOT IN(
		SELECT C.City 
		FROM ORDERS O 
		INNER JOIN Customers C
		ON C.CustomerID = O.CustomerID)
	--b
	SELECT DISTINCT E.City 
	FROM Employees E
	LEFT JOIN Customers C
		ON E.City = C.City
	WHERE C.City IS NULL

--10

--11


--12

